//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EltekLicenseService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EltekLicenseService.IEltekLicenseService")]
    public interface IEltekLicenseService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEltekLicenseService/GetLicense", ReplyAction="http://tempuri.org/IEltekLicenseService/GetLicenseResponse")]
        System.Threading.Tasks.Task<string> GetLicenseAsync(string product, string product_version, string product_build, string customer, string productSerial, string user, string workstation, string ipAddress, string macAddress, string hwSerial, string OS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEltekLicenseService/GetLicenseVer2", ReplyAction="http://tempuri.org/IEltekLicenseService/GetLicenseVer2Response")]
        System.Threading.Tasks.Task<string> GetLicenseVer2Async(string product, string product_version, string product_build, string customer, string productSerial, string user, string workstation, string ipAddress, string macAddress, string allMacAddresses, string hwSerial, string OS);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface IEltekLicenseServiceChannel : EltekLicenseService.IEltekLicenseService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class EltekLicenseServiceClient : System.ServiceModel.ClientBase<EltekLicenseService.IEltekLicenseService>, EltekLicenseService.IEltekLicenseService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public EltekLicenseServiceClient() : 
                base(EltekLicenseServiceClient.GetDefaultBinding(), EltekLicenseServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IEltekLicenseService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EltekLicenseServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(EltekLicenseServiceClient.GetBindingForEndpoint(endpointConfiguration), EltekLicenseServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EltekLicenseServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(EltekLicenseServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EltekLicenseServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(EltekLicenseServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EltekLicenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetLicenseAsync(string product, string product_version, string product_build, string customer, string productSerial, string user, string workstation, string ipAddress, string macAddress, string hwSerial, string OS)
        {
            return base.Channel.GetLicenseAsync(product, product_version, product_build, customer, productSerial, user, workstation, ipAddress, macAddress, hwSerial, OS);
        }
        
        public System.Threading.Tasks.Task<string> GetLicenseVer2Async(string product, string product_version, string product_build, string customer, string productSerial, string user, string workstation, string ipAddress, string macAddress, string allMacAddresses, string hwSerial, string OS)
        {
            return base.Channel.GetLicenseVer2Async(product, product_version, product_build, customer, productSerial, user, workstation, ipAddress, macAddress, allMacAddresses, hwSerial, OS);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEltekLicenseService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEltekLicenseService))
            {
                return new System.ServiceModel.EndpointAddress("http://msm.eltek.com/License/EltekLicenseService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return EltekLicenseServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IEltekLicenseService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return EltekLicenseServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IEltekLicenseService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IEltekLicenseService,
        }
    }
}
